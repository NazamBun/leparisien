package com.example.leparisien.ui.componentsimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.BottomNavigationimport androidx.compose.material.BottomNavigationItemimport androidx.compose.material.Iconimport androidx.compose.material.MaterialThemeimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.example.leparisien.ui.navigation.BottomNavItem// 6. Ce composant affichera les éléments de la barre de navigation// et permettra de changer l'écran en fonction de l'élément sélectionné.@Composablefun BottomNavBar(navController: NavController) {    val items = listOf(            BottomNavItem.Screen1,            BottomNavItem.Screen2,            BottomNavItem.Screen3,            BottomNavItem.Screen4,            BottomNavItem.Screen5    )    val bottomNavigationColor = MaterialTheme.colors.surface    BottomNavigation(            backgroundColor = bottomNavigationColor,            elevation = 1.dp,            modifier = Modifier.height(68.dp)    ) {        val selectedItemIndex = remember { mutableStateOf(0) }        items.forEachIndexed { index, item ->            val selected = selectedItemIndex.value == index            BottomNavigationItem(                    icon = {                        if (selected) {                            Icon(                                    painterResource(item.filledIcon),                                    contentDescription = item.title,                                    modifier = Modifier.size(28.dp),                                    tint = Color(0xFF1ea0e6)                            )                        } else {                            Icon(                                    painterResource(item.outlinedIcon),                                    contentDescription = item.title,                                    modifier = Modifier.size(28.dp),                            )                        }                    },                label = {                    CustomLabelText(                        item.title,                        if (selected) Color(0xFF1ea0e6) else Color.Gray                    )                },                selected = selected,                onClick = {                    selectedItemIndex.value = index                    navController.navigate(item.route) {                        popUpTo(navController.graph.startDestinationId)                        launchSingleTop = true                    }                },                alwaysShowLabel = true,                selectedContentColor = Color.Gray,                unselectedContentColor = Color.Gray            )        }    }}@Composablefun CustomLabelText(text: String, color: Color) {    val customTextStyle = TextStyle(fontFamily = FontFamily.SansSerif, fontWeight = FontWeight.SemiBold, fontSize = 10.sp, color = color)    Text(text, style = customTextStyle)}